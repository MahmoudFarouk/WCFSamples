using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BinaryFormatParser
{
    public class XmlBinaryNodeType
    {
        public const byte EndElement = (byte)0x01;
        public const byte Comment = (byte)0x02;
        public const byte Array = (byte)0x03;
        public const byte MinAttribute = (byte)0x04;
        public const byte ShortAttribute = (byte)0x04;
        public const byte Attribute = (byte)0x05;
        public const byte ShortDictionaryAttribute = (byte)0x06;
        public const byte DictionaryAttribute = (byte)0x07;
        public const byte ShortXmlnsAttribute = (byte)0x08;
        public const byte XmlnsAttribute = (byte)0x09;
        public const byte ShortDictionaryXmlnsAttribute = (byte)0x0A;
        public const byte DictionaryXmlnsAttribute = (byte)0x0B;
        public const byte MinPrefixAttribute = (byte)0x0C;
        public const byte PrefixDictionaryAttributeA = (byte)0x0C;
        public const byte PrefixDictionaryAttributeB = (byte)0x0D;
        public const byte PrefixDictionaryAttributeC = (byte)0x0E;
        public const byte PrefixDictionaryAttributeD = (byte)0x0F;
        public const byte PrefixDictionaryAttributeE = (byte)0x10;
        public const byte PrefixDictionaryAttributeF = (byte)0x11;
        public const byte PrefixDictionaryAttributeG = (byte)0x12;
        public const byte PrefixDictionaryAttributeH = (byte)0x13;
        public const byte PrefixDictionaryAttributeI = (byte)0x14;
        public const byte PrefixDictionaryAttributeJ = (byte)0x15;
        public const byte PrefixDictionaryAttributeK = (byte)0x16;
        public const byte PrefixDictionaryAttributeL = (byte)0x17;
        public const byte PrefixDictionaryAttributeM = (byte)0x18;
        public const byte PrefixDictionaryAttributeN = (byte)0x19;
        public const byte PrefixDictionaryAttributeO = (byte)0x1A;
        public const byte PrefixDictionaryAttributeP = (byte)0x1B;
        public const byte PrefixDictionaryAttributeQ = (byte)0x1C;
        public const byte PrefixDictionaryAttributeR = (byte)0x1D;
        public const byte PrefixDictionaryAttributeS = (byte)0x1E;
        public const byte PrefixDictionaryAttributeT = (byte)0x1F;
        public const byte PrefixDictionaryAttributeU = (byte)0x20;
        public const byte PrefixDictionaryAttributeV = (byte)0x21;
        public const byte PrefixDictionaryAttributeW = (byte)0x22;
        public const byte PrefixDictionaryAttributeX = (byte)0x23;
        public const byte PrefixDictionaryAttributeY = (byte)0x24;
        public const byte PrefixDictionaryAttributeZ = (byte)0x25;
        public const byte PrefixAttributeA = (byte)0x26;
        public const byte PrefixAttributeB = (byte)0x27;
        public const byte PrefixAttributeC = (byte)0x28;
        public const byte PrefixAttributeD = (byte)0x29;
        public const byte PrefixAttributeE = (byte)0x2A;
        public const byte PrefixAttributeF = (byte)0x2B;
        public const byte PrefixAttributeG = (byte)0x2C;
        public const byte PrefixAttributeH = (byte)0x2D;
        public const byte PrefixAttributeI = (byte)0x2E;
        public const byte PrefixAttributeJ = (byte)0x2F;
        public const byte PrefixAttributeK = (byte)0x30;
        public const byte PrefixAttributeL = (byte)0x31;
        public const byte PrefixAttributeM = (byte)0x32;
        public const byte PrefixAttributeN = (byte)0x33;
        public const byte PrefixAttributeO = (byte)0x34;
        public const byte PrefixAttributeP = (byte)0x35;
        public const byte PrefixAttributeQ = (byte)0x36;
        public const byte PrefixAttributeR = (byte)0x37;
        public const byte PrefixAttributeS = (byte)0x38;
        public const byte PrefixAttributeT = (byte)0x39;
        public const byte PrefixAttributeU = (byte)0x3A;
        public const byte PrefixAttributeV = (byte)0x3B;
        public const byte PrefixAttributeW = (byte)0x3C;
        public const byte PrefixAttributeX = (byte)0x3D;
        public const byte PrefixAttributeY = (byte)0x3E;
        public const byte PrefixAttributeZ = (byte)0x3F;
        public const byte MaxPrefixAttribute = (byte)0x3F;
        public const byte MaxAttrribute = (byte)0x3F;
        public const byte MinElement = (byte)0x40;
        public const byte ShortElement = (byte)0x40;
        public const byte Element = (byte)0x41;
        public const byte ShortDictionaryElement = (byte)0x42;
        public const byte DictionaryElement = (byte)0x43;
        public const byte MinPrefixElement = (byte)0x44;
        public const byte PrefixDictionaryElementA = (byte)0x44;
        public const byte PrefixDictionaryElementB = (byte)0x45;
        public const byte PrefixDictionaryElementC = (byte)0x46;
        public const byte PrefixDictionaryElementD = (byte)0x47;
        public const byte PrefixDictionaryElementE = (byte)0x48;
        public const byte PrefixDictionaryElementF = (byte)0x49;
        public const byte PrefixDictionaryElementG = (byte)0x4A;
        public const byte PrefixDictionaryElementH = (byte)0x4B;
        public const byte PrefixDictionaryElementI = (byte)0x4C;
        public const byte PrefixDictionaryElementJ = (byte)0x4D;
        public const byte PrefixDictionaryElementK = (byte)0x4E;
        public const byte PrefixDictionaryElementL = (byte)0x4F;
        public const byte PrefixDictionaryElementM = (byte)0x50;
        public const byte PrefixDictionaryElementN = (byte)0x51;
        public const byte PrefixDictionaryElementO = (byte)0x52;
        public const byte PrefixDictionaryElementP = (byte)0x53;
        public const byte PrefixDictionaryElementQ = (byte)0x54;
        public const byte PrefixDictionaryElementR = (byte)0x55;
        public const byte PrefixDictionaryElementS = (byte)0x56;
        public const byte PrefixDictionaryElementT = (byte)0x57;
        public const byte PrefixDictionaryElementU = (byte)0x58;
        public const byte PrefixDictionaryElementV = (byte)0x59;
        public const byte PrefixDictionaryElementW = (byte)0x5A;
        public const byte PrefixDictionaryElementX = (byte)0x5B;
        public const byte PrefixDictionaryElementY = (byte)0x5C;
        public const byte PrefixDictionaryElementZ = (byte)0x5D;
        public const byte PrefixElementA = (byte)0x5E;
        public const byte PrefixElementB = (byte)0x5F;
        public const byte PrefixElementC = (byte)0x60;
        public const byte PrefixElementD = (byte)0x61;
        public const byte PrefixElementE = (byte)0x62;
        public const byte PrefixElementF = (byte)0x63;
        public const byte PrefixElementG = (byte)0x64;
        public const byte PrefixElementH = (byte)0x65;
        public const byte PrefixElementI = (byte)0x66;
        public const byte PrefixElementJ = (byte)0x67;
        public const byte PrefixElementK = (byte)0x68;
        public const byte PrefixElementL = (byte)0x69;
        public const byte PrefixElementM = (byte)0x6A;
        public const byte PrefixElementN = (byte)0x6B;
        public const byte PrefixElementO = (byte)0x6C;
        public const byte PrefixElementP = (byte)0x6D;
        public const byte PrefixElementQ = (byte)0x6E;
        public const byte PrefixElementR = (byte)0x6F;
        public const byte PrefixElementS = (byte)0x70;
        public const byte PrefixElementT = (byte)0x71;
        public const byte PrefixElementU = (byte)0x72;
        public const byte PrefixElementV = (byte)0x73;
        public const byte PrefixElementW = (byte)0x74;
        public const byte PrefixElementX = (byte)0x75;
        public const byte PrefixElementY = (byte)0x76;
        public const byte PrefixElementZ = (byte)0x77;
        public const byte MaxPrefixElement = (byte)0x77;
        public const byte MaxElement = (byte)0x77;
        public const byte MinText = (byte)0x80;
        public const byte ZeroText = (byte)0x80;
        public const byte ZeroTextWithEndElement = (byte)0x81;
        public const byte OneText = (byte)0x82;
        public const byte OneTextWithEndElement = (byte)0x83;
        public const byte FalseText = (byte)0x84;
        public const byte FalseTextWithEndElement = (byte)0x85;
        public const byte TrueText = (byte)0x86;
        public const byte TrueTextWithEndElement = (byte)0x87;
        public const byte Int8Text = (byte)0x88;
        public const byte Int8TextWithEndElement = (byte)0x89;
        public const byte Int16Text = (byte)0x8A;
        public const byte Int16TextWithEndElement = (byte)0x8B;
        public const byte Int32Text = (byte)0x8C;
        public const byte Int32TextWithEndElement = (byte)0x8D;
        public const byte Int64Text = (byte)0x8E;
        public const byte Int64TextWithEndElement = (byte)0x8F;
        public const byte FloatText = (byte)0x90;
        public const byte FloatTextWithEndElement = (byte)0x91;
        public const byte DoubleText = (byte)0x92;
        public const byte DoubleTextWithEndElement = (byte)0x93;
        public const byte DecimalText = (byte)0x94;
        public const byte DecimalTextWithEndElement = (byte)0x95;
        public const byte DateTimeText = (byte)0x96;
        public const byte DateTimeTextWithEndElement = (byte)0x97;
        public const byte Chars8Text = (byte)0x98;
        public const byte Chars8TextWithEndElement = (byte)0x99;
        public const byte Chars16Text = (byte)0x9A;
        public const byte Chars16TextWithEndElement = (byte)0x9B;
        public const byte Chars32Text = (byte)0x9C;
        public const byte Chars32TextWithEndElement = (byte)0x9D;
        public const byte Bytes8Text = (byte)0x9E;
        public const byte Bytes8TextWithEndElement = (byte)0x9F;
        public const byte Bytes16Text = (byte)0xA0;
        public const byte Bytes16TextWithEndElement = (byte)0xA1;
        public const byte Bytes32Text = (byte)0xA2;
        public const byte Bytes32TextWithEndElement = (byte)0xA3;
        public const byte StartListText = (byte)0xA4;
        public const byte StartListTextWithEndElement = (byte)0xA5;
        public const byte EndListText = (byte)0xA6;
        public const byte EndListTextWithEndElement = (byte)0xA7;
        public const byte EmptyText = (byte)0xA8;
        public const byte EmptyTextWithEndElement = (byte)0xA9;
        public const byte DictionaryText = (byte)0xAA;
        public const byte DictionaryTextWithEndElement = (byte)0xAB;
        public const byte UniqueIdText = (byte)0xAC;
        public const byte UniqueIdTextWithEndElement = (byte)0xAD;
        public const byte TimeSpanText = (byte)0xAE;
        public const byte TimeSpanTextWithEndElement = (byte)0xAF;
        public const byte GuidText = (byte)0xB0;
        public const byte GuidTextWithEndElement = (byte)0xB1;
        public const byte UInt64Text = (byte)0xB2;
        public const byte UInt64TextWithEndElement = (byte)0xB3;
        public const byte BoolText = (byte)0xB4;
        public const byte BoolTextWithEndElement = (byte)0xB5;
        public const byte UnicodeChars8Text = (byte)0xB6;
        public const byte UnicodeChars8TextWithEndElement = (byte)0xB7;
        public const byte UnicodeChars16Text = (byte)0xB8;
        public const byte UnicodeChars16TextWithEndElement = (byte)0xB9;
        public const byte UnicodeChars32Text = (byte)0xBA;
        public const byte UnicodeChars32TextWithEndElement = (byte)0xBB;
        public const byte QNameDictionaryText = (byte)0xBC;
        public const byte QNameDictionaryTextWithEndElement = (byte)0xBD;
        public const byte MaxText = (byte)0xBD;

        public static bool IsPrefixNode(byte nodeType)
        {
            return (((MinPrefixAttribute <= nodeType) && (nodeType <= MaxPrefixAttribute)) ||
                ((MinPrefixElement <= nodeType) && (nodeType <= MaxPrefixElement)));
        }

        public static bool IsTextNode(byte nodeType)
        {
            return ((MinText <= nodeType) && (nodeType <= MaxText) && ((((int)nodeType) & 1) == 0));
        }

        public static bool IsTextNodeWithEndElement(byte nodeType)
        {
            return ((MinText <= nodeType) && (nodeType <= MaxText) && ((((int)nodeType) & 1) != 0));
        }

        public static bool IsDictionaryElementNode(byte nodeType)
        {
            return (nodeType == DictionaryElement || nodeType == ShortDictionaryElement || (PrefixDictionaryElementA <= nodeType && nodeType <= PrefixDictionaryElementZ));
        }

        public static bool IsDictionaryAttributeNode(byte nodeType)
        {
            return (nodeType == DictionaryAttribute || nodeType == ShortDictionaryAttribute || nodeType == ShortDictionaryXmlnsAttribute || nodeType == DictionaryXmlnsAttribute || (PrefixDictionaryAttributeA <= nodeType && nodeType <= PrefixDictionaryAttributeZ));
        }

        public static string GetNodeName(byte nodeType)
        {
            if (nodeType == ((byte)0x01)) return "EndElement";
            if (nodeType == ((byte)0x02)) return "Comment";
            if (nodeType == ((byte)0x03)) return "Array";
            if (nodeType == ((byte)0x04)) return "ShortAttribute";
            if (nodeType == ((byte)0x05)) return "Attribute";
            if (nodeType == ((byte)0x06)) return "ShortDictionaryAttribute";
            if (nodeType == ((byte)0x07)) return "DictionaryAttribute";
            if (nodeType == ((byte)0x08)) return "ShortXmlnsAttribute";
            if (nodeType == ((byte)0x09)) return "XmlnsAttribute";
            if (nodeType == ((byte)0x0A)) return "ShortDictionaryXmlnsAttribute";
            if (nodeType == ((byte)0x0B)) return "DictionaryXmlnsAttribute";
            if (nodeType == ((byte)0x0C)) return "PrefixDictionaryAttributeA";
            if (nodeType == ((byte)0x0D)) return "PrefixDictionaryAttributeB";
            if (nodeType == ((byte)0x0E)) return "PrefixDictionaryAttributeC";
            if (nodeType == ((byte)0x0F)) return "PrefixDictionaryAttributeD";
            if (nodeType == ((byte)0x10)) return "PrefixDictionaryAttributeE";
            if (nodeType == ((byte)0x11)) return "PrefixDictionaryAttributeF";
            if (nodeType == ((byte)0x12)) return "PrefixDictionaryAttributeG";
            if (nodeType == ((byte)0x13)) return "PrefixDictionaryAttributeH";
            if (nodeType == ((byte)0x14)) return "PrefixDictionaryAttributeI";
            if (nodeType == ((byte)0x15)) return "PrefixDictionaryAttributeJ";
            if (nodeType == ((byte)0x16)) return "PrefixDictionaryAttributeK";
            if (nodeType == ((byte)0x17)) return "PrefixDictionaryAttributeL";
            if (nodeType == ((byte)0x18)) return "PrefixDictionaryAttributeM";
            if (nodeType == ((byte)0x19)) return "PrefixDictionaryAttributeN";
            if (nodeType == ((byte)0x1A)) return "PrefixDictionaryAttributeO";
            if (nodeType == ((byte)0x1B)) return "PrefixDictionaryAttributeP";
            if (nodeType == ((byte)0x1C)) return "PrefixDictionaryAttributeQ";
            if (nodeType == ((byte)0x1D)) return "PrefixDictionaryAttributeR";
            if (nodeType == ((byte)0x1E)) return "PrefixDictionaryAttributeS";
            if (nodeType == ((byte)0x1F)) return "PrefixDictionaryAttributeT";
            if (nodeType == ((byte)0x20)) return "PrefixDictionaryAttributeU";
            if (nodeType == ((byte)0x21)) return "PrefixDictionaryAttributeV";
            if (nodeType == ((byte)0x22)) return "PrefixDictionaryAttributeW";
            if (nodeType == ((byte)0x23)) return "PrefixDictionaryAttributeX";
            if (nodeType == ((byte)0x24)) return "PrefixDictionaryAttributeY";
            if (nodeType == ((byte)0x25)) return "PrefixDictionaryAttributeZ";
            if (nodeType == ((byte)0x26)) return "PrefixAttributeA";
            if (nodeType == ((byte)0x27)) return "PrefixAttributeB";
            if (nodeType == ((byte)0x28)) return "PrefixAttributeC";
            if (nodeType == ((byte)0x29)) return "PrefixAttributeD";
            if (nodeType == ((byte)0x2A)) return "PrefixAttributeE";
            if (nodeType == ((byte)0x2B)) return "PrefixAttributeF";
            if (nodeType == ((byte)0x2C)) return "PrefixAttributeG";
            if (nodeType == ((byte)0x2D)) return "PrefixAttributeH";
            if (nodeType == ((byte)0x2E)) return "PrefixAttributeI";
            if (nodeType == ((byte)0x2F)) return "PrefixAttributeJ";
            if (nodeType == ((byte)0x30)) return "PrefixAttributeK";
            if (nodeType == ((byte)0x31)) return "PrefixAttributeL";
            if (nodeType == ((byte)0x32)) return "PrefixAttributeM";
            if (nodeType == ((byte)0x33)) return "PrefixAttributeN";
            if (nodeType == ((byte)0x34)) return "PrefixAttributeO";
            if (nodeType == ((byte)0x35)) return "PrefixAttributeP";
            if (nodeType == ((byte)0x36)) return "PrefixAttributeQ";
            if (nodeType == ((byte)0x37)) return "PrefixAttributeR";
            if (nodeType == ((byte)0x38)) return "PrefixAttributeS";
            if (nodeType == ((byte)0x39)) return "PrefixAttributeT";
            if (nodeType == ((byte)0x3A)) return "PrefixAttributeU";
            if (nodeType == ((byte)0x3B)) return "PrefixAttributeV";
            if (nodeType == ((byte)0x3C)) return "PrefixAttributeW";
            if (nodeType == ((byte)0x3D)) return "PrefixAttributeX";
            if (nodeType == ((byte)0x3E)) return "PrefixAttributeY";
            if (nodeType == ((byte)0x3F)) return "PrefixAttributeZ";
            if (nodeType == ((byte)0x40)) return "ShortElement";
            if (nodeType == ((byte)0x41)) return "Element";
            if (nodeType == ((byte)0x42)) return "ShortDictionaryElement";
            if (nodeType == ((byte)0x43)) return "DictionaryElement";
            if (nodeType == ((byte)0x44)) return "PrefixDictionaryElementA";
            if (nodeType == ((byte)0x45)) return "PrefixDictionaryElementB";
            if (nodeType == ((byte)0x46)) return "PrefixDictionaryElementC";
            if (nodeType == ((byte)0x47)) return "PrefixDictionaryElementD";
            if (nodeType == ((byte)0x48)) return "PrefixDictionaryElementE";
            if (nodeType == ((byte)0x49)) return "PrefixDictionaryElementF";
            if (nodeType == ((byte)0x4A)) return "PrefixDictionaryElementG";
            if (nodeType == ((byte)0x4B)) return "PrefixDictionaryElementH";
            if (nodeType == ((byte)0x4C)) return "PrefixDictionaryElementI";
            if (nodeType == ((byte)0x4D)) return "PrefixDictionaryElementJ";
            if (nodeType == ((byte)0x4E)) return "PrefixDictionaryElementK";
            if (nodeType == ((byte)0x4F)) return "PrefixDictionaryElementL";
            if (nodeType == ((byte)0x50)) return "PrefixDictionaryElementM";
            if (nodeType == ((byte)0x51)) return "PrefixDictionaryElementN";
            if (nodeType == ((byte)0x52)) return "PrefixDictionaryElementO";
            if (nodeType == ((byte)0x53)) return "PrefixDictionaryElementP";
            if (nodeType == ((byte)0x54)) return "PrefixDictionaryElementQ";
            if (nodeType == ((byte)0x55)) return "PrefixDictionaryElementR";
            if (nodeType == ((byte)0x56)) return "PrefixDictionaryElementS";
            if (nodeType == ((byte)0x57)) return "PrefixDictionaryElementT";
            if (nodeType == ((byte)0x58)) return "PrefixDictionaryElementU";
            if (nodeType == ((byte)0x59)) return "PrefixDictionaryElementV";
            if (nodeType == ((byte)0x5A)) return "PrefixDictionaryElementW";
            if (nodeType == ((byte)0x5B)) return "PrefixDictionaryElementX";
            if (nodeType == ((byte)0x5C)) return "PrefixDictionaryElementY";
            if (nodeType == ((byte)0x5D)) return "PrefixDictionaryElementZ";
            if (nodeType == ((byte)0x5E)) return "PrefixElementA";
            if (nodeType == ((byte)0x5F)) return "PrefixElementB";
            if (nodeType == ((byte)0x60)) return "PrefixElementC";
            if (nodeType == ((byte)0x61)) return "PrefixElementD";
            if (nodeType == ((byte)0x62)) return "PrefixElementE";
            if (nodeType == ((byte)0x63)) return "PrefixElementF";
            if (nodeType == ((byte)0x64)) return "PrefixElementG";
            if (nodeType == ((byte)0x65)) return "PrefixElementH";
            if (nodeType == ((byte)0x66)) return "PrefixElementI";
            if (nodeType == ((byte)0x67)) return "PrefixElementJ";
            if (nodeType == ((byte)0x68)) return "PrefixElementK";
            if (nodeType == ((byte)0x69)) return "PrefixElementL";
            if (nodeType == ((byte)0x6A)) return "PrefixElementM";
            if (nodeType == ((byte)0x6B)) return "PrefixElementN";
            if (nodeType == ((byte)0x6C)) return "PrefixElementO";
            if (nodeType == ((byte)0x6D)) return "PrefixElementP";
            if (nodeType == ((byte)0x6E)) return "PrefixElementQ";
            if (nodeType == ((byte)0x6F)) return "PrefixElementR";
            if (nodeType == ((byte)0x70)) return "PrefixElementS";
            if (nodeType == ((byte)0x71)) return "PrefixElementT";
            if (nodeType == ((byte)0x72)) return "PrefixElementU";
            if (nodeType == ((byte)0x73)) return "PrefixElementV";
            if (nodeType == ((byte)0x74)) return "PrefixElementW";
            if (nodeType == ((byte)0x75)) return "PrefixElementX";
            if (nodeType == ((byte)0x76)) return "PrefixElementY";
            if (nodeType == ((byte)0x77)) return "PrefixElementZ";
            if (nodeType == ((byte)0x80)) return "ZeroText";
            if (nodeType == ((byte)0x82)) return "OneText";
            if (nodeType == ((byte)0x84)) return "FalseText";
            if (nodeType == ((byte)0x86)) return "TrueText";
            if (nodeType == ((byte)0x88)) return "Int8Text";
            if (nodeType == ((byte)0x8A)) return "Int16Text";
            if (nodeType == ((byte)0x8C)) return "Int32Text";
            if (nodeType == ((byte)0x8E)) return "Int64Text";
            if (nodeType == ((byte)0x90)) return "FloatText";
            if (nodeType == ((byte)0x92)) return "DoubleText";
            if (nodeType == ((byte)0x94)) return "DecimalText";
            if (nodeType == ((byte)0x96)) return "DateTimeText";
            if (nodeType == ((byte)0x98)) return "Chars8Text";
            if (nodeType == ((byte)0x9A)) return "Chars16Text";
            if (nodeType == ((byte)0x9C)) return "Chars32Text";
            if (nodeType == ((byte)0x9E)) return "Bytes8Text";
            if (nodeType == ((byte)0xA0)) return "Bytes16Text";
            if (nodeType == ((byte)0xA2)) return "Bytes32Text";
            if (nodeType == ((byte)0xA4)) return "StartListText";
            if (nodeType == ((byte)0xA6)) return "EndListText";
            if (nodeType == ((byte)0xA8)) return "EmptyText";
            if (nodeType == ((byte)0xAA)) return "DictionaryText";
            if (nodeType == ((byte)0xAC)) return "UniqueIdText";
            if (nodeType == ((byte)0xAE)) return "TimeSpanText";
            if (nodeType == ((byte)0xB0)) return "GuidText";
            if (nodeType == ((byte)0xB2)) return "UInt64Text";
            if (nodeType == ((byte)0xB4)) return "BoolText";
            if (nodeType == ((byte)0xB6)) return "UnicodeChars8Text";
            if (nodeType == ((byte)0xB8)) return "UnicodeChars16Text";
            if (nodeType == ((byte)0xBA)) return "UnicodeChars32Text";
            if (nodeType == ((byte)0xBC)) return "QNameDictionaryText";
            if (nodeType == ((byte)0x81)) return "ZeroTextWithEndElement";
            if (nodeType == ((byte)0x83)) return "OneTextWithEndElement";
            if (nodeType == ((byte)0x85)) return "FalseTextWithEndElement";
            if (nodeType == ((byte)0x87)) return "TrueTextWithEndElement";
            if (nodeType == ((byte)0x89)) return "Int8TextWithEndElement";
            if (nodeType == ((byte)0x8B)) return "Int16TextWithEndElement";
            if (nodeType == ((byte)0x8D)) return "Int32TextWithEndElement";
            if (nodeType == ((byte)0x8F)) return "Int64TextWithEndElement";
            if (nodeType == ((byte)0x91)) return "FloatTextWithEndElement";
            if (nodeType == ((byte)0x93)) return "DoubleTextWithEndElement";
            if (nodeType == ((byte)0x95)) return "DecimalTextWithEndElement";
            if (nodeType == ((byte)0x97)) return "DateTimeTextWithEndElement";
            if (nodeType == ((byte)0x99)) return "Chars8TextWithEndElement";
            if (nodeType == ((byte)0x9B)) return "Chars16TextWithEndElement";
            if (nodeType == ((byte)0x9D)) return "Chars32TextWithEndElement";
            if (nodeType == ((byte)0x9F)) return "Bytes8TextWithEndElement";
            if (nodeType == ((byte)0xA1)) return "Bytes16TextWithEndElement";
            if (nodeType == ((byte)0xA3)) return "Bytes32TextWithEndElement";
            if (nodeType == ((byte)0xA5)) return "StartListTextWithEndElement";
            if (nodeType == ((byte)0xA7)) return "EndListTextWithEndElement";
            if (nodeType == ((byte)0xA9)) return "EmptyTextWithEndElement";
            if (nodeType == ((byte)0xAB)) return "DictionaryTextWithEndElement";
            if (nodeType == ((byte)0xAD)) return "UniqueIdTextWithEndElement";
            if (nodeType == ((byte)0xAF)) return "TimeSpanTextWithEndElement";
            if (nodeType == ((byte)0xB1)) return "GuidTextWithEndElement";
            if (nodeType == ((byte)0xB3)) return "UInt64TextWithEndElement";
            if (nodeType == ((byte)0xB5)) return "BoolTextWithEndElement";
            if (nodeType == ((byte)0xB7)) return "UnicodeChars8TextWithEndElement";
            if (nodeType == ((byte)0xB9)) return "UnicodeChars16TextWithEndElement";
            if (nodeType == ((byte)0xBB)) return "UnicodeChars32TextWithEndElement";
            if (nodeType == ((byte)0xBD)) return "QNameDictionaryTextWithEndElement";
            return "UnknownNodeType";
        }
    }
}